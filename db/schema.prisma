// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  name           String?
  email          String    @unique
  hashedPassword String?
  role           String    @default("USER")
  Session        Session[]
  Token          Token[]
  Skill          Skill[]
  ChatHistory    ChatHistory[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  user               User?     @relation(fields: [userId], references: [id])
  userId             Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Skill {
  id          Int           @id @default(autoincrement())
  skillName   String
  startDate   DateTime
  targetDate  DateTime
  totalDays   Int
  isDone      Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  Progress    Progress[]    
  UserProject UserProject[]
}

model Progress {
  id        Int      @id @default(autoincrement())
  log_date  DateTime
  note      String?
  isChecked Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  skill     Skill    @relation(fields: [skillId], references: [id],onDelete: Cascade)
  skillId   Int
}

model UserProject {
  id           Int      @id @default(autoincrement())
  projectName  String
  projectProof String
  description  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  skill        Skill    @relation(fields: [skillId], references: [id])
  skillId      Int
}
model ChatHistory{
   id         Int      @id @default(autoincrement())
  userId     Int
  skillId    Int?      // Opsional, karena GENERAL tidak butuh skill
  message   String?  @db.Text
  response  String  @db.Text
  type       ChatType @default(SKILL)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}

enum ChatType {
  SKILL
  GENERAL
}